% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-cell_data_set.R
\name{size_factors<-}
\alias{size_factors<-}
\title{#' @rdname cell_data_set-methods
#' @aliases cell_data_set,ANY,ANY,ANY-method
#' @param x the cell_data_set object
#' @param i index (or name) to extract or replace
#' @param j index (or name) to extract or replace
#' @param ... extra arguments passed to method
#' @param drop If TRUE the result is coerced to the lowest possible dimension
#'   (see the examples). This only works for extracting elements, not for the
#'   replacement.
#' @docType methods
#' @import Matrix
#' @rdname extract-methods
setMethod("[", "cell_data_set", function(x, i, j, ..., drop = FALSE) {
if (missing(drop))
drop <- FALSE
if (missing(i) && missing(j)) {
if (!missing(...))
stop("specify genes or samples to subset; use '",
substitute(x), "$", names(list(...))[\link{1}],
"' to access phenoData variables")
return(x)
}
if (!isVersioned(x) || !isCurrent(x)\link{"eSet"})
x <- updateObject(x)
if (!missing(j)) {
phenoData(x) <- phenoData(x)\link{j,, ..., drop = drop}
protocolData(x) <- protocolData(x)\link{j,, ..., drop = drop}
}
if (!missing(i))
featureData(x) <- featureData(x)\link{i,,..., drop=drop}assayData; implemented here to avoid function call

orig <- assayData(x)
storage.mode <-  Biobase:::assayDataStorageMode(orig)
assayData(x) <-
switch(storage.mode,
environment =,
lockedEnvironment = {
aData <- new.env(parent=emptyenv())
if (missing(i))  {                   # j must be present
for(nm in ls(orig)) {
aData[\link{nm}] <- orig[\link{nm}]\link{, j, ..., drop = drop}
}
} else if (missing(j)) { # j may or may not be present
for(nm in ls(orig)) {
aData[\link{nm}] <- orig[\link{nm}]\link{i,, ..., drop = drop}
}
}  else {
for(nm in ls(orig)) {
aData[\link{nm}] <- orig[\link{nm}]\link{i, j, ..., drop = drop}
}
}
if ("lockedEnvironment" == storage.mode) assayDataEnvLock(aData)
aData
},
list = {
if (missing(i))                     # j must be present
lapply(orig, function(obj) obj\link{, j, ..., drop = drop})
else {                              # j may or may not be present
if (missing(j))
lapply(orig, function(obj) obj\link{i,, ..., drop = drop})
else
lapply(orig, function(obj) obj\link{i, j, ..., drop = drop})
}
})
x@aux_ordering_data = as.environment(as.list(x@aux_ordering_data, all.names=TRUE))
x@aux_clustering_data = as.environment(as.list(x@aux_clustering_data,
all.names=TRUE))
x
})}
\usage{
size_factors(cds) <- value
}
\arguments{
\item{cds}{A cell_data_set object.}

\item{value}{an igraph object describing the minimum spanning tree.}
}
\value{
An updated cell_data_set object
}
\description{
Set the minimum spanning tree generated by Monocle during cell ordering.
}
\details{
Sets the minimum spanning tree used by Monocle during cell ordering. Not intended to be called directly.
}
\examples{
\dontrun{
cds <- size_factors(T)
}
}
