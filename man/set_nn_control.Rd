% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nearest_neighbors.R
\name{set_nn_control}
\alias{set_nn_control}
\title{Verify and set nearest neighbor parameter list.}
\usage{
set_nn_control(
  nn_control = list(),
  k = 25,
  method_default = NULL,
  verbose = FALSE
)
}
\arguments{
\item{nn_control}{list A list of parameters passed
to the nearest neighbor function specified by
nn_control[\link{'method'}]. The nn_control list can be empty in which
case the variables are set to their default values.
See below for a description of the valid named values and
their default values.}

\item{k}{integer The number of desired nearest neighbor
points to return from a search. This value is used only
to set the default annoy search_k parameter. The value
is ignored for index builds. Default is 25.}

\item{method_default}{The nearest neighbor method to use when not
specified in the nn_control list.}

\item{verbose}{Whether to emit verbose output.}
}
\value{
An updated nn_control list.
}
\description{
Verifies the listed parameter values
that will be passed to the nearest neighbor function
given by nn_control[\link{'method'}]. Unspecified
values are set to default values.
}
\section{Optional nn_control parameters}{

\describe{
\item{method}{The method used to find nearest neighbor points.
The available methods are 'nn2', 'annoy', and 'hnsw'. If not
specified, the method given by the method_default parameter is
used.
Detailed information about each can be found on the WWW sites:
https://cran.r-project.org/web/packages/RANN/,
https://cran.r-project.org/web/packages/RcppAnnoy/index.html,
and https://cran.rstudio.com/web/packages/RcppHNSW/index.html.}
\item{metric}{The distance metric used by the nearest neighbor functions.
Annoy accepts 'euclidean', 'cosine', 'manhattan', and 'hamming'.
HNSW accepts 'euclidean', 'l2', 'cosine', and 'ip'. RANN
uses 'euclidean'.}
\item{n_trees}{The annoy index build parameter that affects the build
time and index size. Larger values give more accurate results,
longer build times, and larger indexes. The default is 50.}
\item{search_k}{The annoy index search parameter that affects the
search accuracy and time. Larger values give more accurate results
and longer search times. Default is 100 * k.}
\item{M}{The HNSW index build parameter that affects the
search accuracy and memory requirements. Larger values give more
accurate search results and increase the index memory use. Default
is 48.}
\item{ef_construction}{The HNSW index build parameter that affects
the search accuracy and index build time. Larger values give more
accurate search results and longer build times. Default is 200.}
\item{ef}{The HNSW index search parameter that affects the search
accuracy and search time. Larger values give more accurate results
and longer search times. Default is 10.}
\item{grain_size}{The annoy and HNSW parameter the gives the minimum
amount of work to do per thread. Default is 1.}
\item{cores}{The annoy and HNSW parameter that gives the number of
threads to use for the annoy index search and for the HNSW index
build and search. Default is 1.}
}
}

